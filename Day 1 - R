[English] #06 July, 2018

Welcome to my personal 100 days ML-code challenge!
As this is the first day, I'll be reviewing all the syntax and semantics of the programming language R! 
All of this will be needed to further improve our machine learning habilities!

● The basic concepts about the language R: 
○ Introduction.
○ Expressions.
○ Vectors and vectorization.
○ Matrices.
○ Funtions.
○ Lists.
○ Archives.
○ Plot.

                                  Introduction

- What's R?

○ It is a programming environment to deal with data analysis, calculations and graphical visualization;
○ Free!
○ Available for Windows, MacOS, Linux;
○ Download and other info: http://cran.r-project.org/

- How to open R?
                                
○ Windows: double-click the R icon.
○ Linux: using a terminal, just enter the R command.
//Type 'q()' to quit R.

- R interpreter
                                  
○ Commands are typed at the R command prompt ">".
○ This prompt indicates that R is waiting for you type a command.
○ You can type an R command at the prompt and press [Enter] to execute it.
○ Using the "↑" key you can navigate through the history of commands typed at the prompt.

- If you need help
                                
○ Type help(command) 
E.g.: help(print) //It returns the print's documentation

- Examples
                                 
○ R provides a command that lists examples of uses of other commands:
E.g.: example(rnorm) //It returns 

- R is case sensitive
                                  
○ help(rnorm) //It returns the rnorm's documentation.
○ Help(rnorm) //It will bring an error.

- Comments: #
                                  
○ Any text or command that is after # will be disregarded at runtime.

- Commands in R can be separated by ";" or by a new line [Enter].

○ If a command is not complete, the R prompt will change ">" to "+"
○ The "+" signal will continue at the prompt until the user enters the command completely or the ctrl+c keys are pressed

- R allows a set of commands to be executed from a file

○ The user creates a text file containing a list of commands to be executed
○ Within the R section, the user can use the "source" command.

Example:
> source ("C:\path\to\file\commands.R")
> source ("othercommands.R")

Examples of mathematical operations.

> 1+1 #addition between two numbers
[1] 2
> 0-1 #subtraction between two numbers
[1] -1
> 4*2 #multiplication between two numbers
[1] 8
> 4/2 #division between two numbers
[1] 2
> 15%%4 #rest of the division between two numbers
[1] 3
  








[Portuguese]
● Os conceitos básicos da linguagem R:
○ Introdução.
○ Expressões.
○ Vetores e vetorização.
○ Matrizes.
○ Funções.
○ Listas.
○ Arquivos.
○ Plot.

                                            Introdução

- O que é R?

○ É um ambiente de programação para análise de dados, cálculos e visualização gráfica;
○ De graça!
○ Disponível para Windows, MacOS, Linux
○ Download e outras informações em: http://cran.r-project.org/

- Como abrir o R?
                                
○ Windows: duplo clique no ícone do R
○ Linux: usando um terminal, basta digitar o comando R 
//Digite 'q()' para sair do R.

- Interpretador do R
                                
○ Comandos são digitados no prompt de comando do R “>”.
○ Esse prompt indica que o R está aguardando que você digite um comando.
○ Você pode digitar um comando R no prompt e pressionar [Enter] para executá-lo.
○ Com a tecla “↑” você pode navegar pelo histórico dos comando digitados no prompt.

Se precisar de ajuda
                                
○ Digite ?COMANDO 
Exemplo: ?print //Retorna a documentação da função print
      ou
○ Digite help(COMANDO) 
Exemplo: help(print) 

Exemplos
                                
○ O R fornece um comando que lista exemplos de usos de outros comandos:
Exemplo: example(rnorm) // 

- R é case sensitive
                                  
○ help(rnorm) //Retorna a documentação de 'rnorm'.
○ Help(rnorm) //Retorna um erro, afinal não existe nenhuma função chamada 'Help'.

- Comentários: #
                                
○ Qualquer texto ou comando que estiver após # será desconsiderado na execução.

- Comandos em R podem ser separados por “;” ou por uma nova linha [Enter]

○ Se um comando não estiver completo, o prompt do R trocará “>” por “+”
○ O Sinal “+” continuará no prompt até que o usuário digite o comando completamente ou que as teclas ctrl+c sejam pressionadas 

- R permite que um conjunto de comandos seja executado partir de um arquivo

○ O usuário cria um arquivo de texto contendo uma lista de comandos a ser executado
○ Dentro da seção do R, o usuário pode usar o comando “source”. 

Exemplo:
>source(“C:\caminho\para\arquivo\comandos.R”)
>source(“outroscomandos.R”)

                                            Expressões

Exemplo de operações matemáticas

> 1+1 #adição entre dois números
[1] 2 
> 0-1 #subtração entre dois números
[1] -1
> 4*2 #multiplicação entre dois números
[1] 8
> 4/2 #divisão entre dois números
[1] 2
> 15%%4 #resto da divisão entre dois números
[1] 3
> 5**2 #five to the power two 
[1] 25
> 5^3 #five to the power three

- Expressões Lógicas: Verdadeiro ou Falso

○ Verdadeiro: TRUE ou T
○ Falso: FALSE ou F

Exemplo:
> 7 < 9
[1] TRUE
> 3 > 5
[1] FALSE
> 2 + 1 == 8
[1] FALSE
> F == FALSE
[1] TRUE

- R permite armazenar valores em variáveis. Comandos de atribuição:
○ “=”
○ “<-”
○ “->”
Exemplo:
> x = 1
> y -> 2
> 3 <- z
> x + y + z
[1] 6

- R não é uma linguagem fortemente tipada, i.e., durante a execução do código, uma variável pode assumir qualquer valor. 
Exemplo:
> a = 7 #numérico
> a
[1] 7
> a = 3.1415 #numérico
> a
[1] 3.1415
> a <- 'T' #caracter
> a
[1] "T"
> a <- F #booleano (lógico)
> a
[1] FALSE
> a = 1-5i #complexo
> a
[1] 1-5i 

- Estrutura if-else
○ if (condição) expressão
Exemplo:
> if (6>2) 
+   print("verdade")
[1] "verdade"

○ if (condição) expressão else expressão
Exemplo:
> if (6>8) {
+   print("bloco 1")
+ } else {
+   print("bloco 2")
}
[1] "bloco 2"

○ ifelse (condição, sim, não)
> ifelse  (5>4, "maior", "menor")
[1] "maior"

- Estrutura while
○ while (condição) expressão
Exemplo:
> a=2
> while (a<6) {
+   cat("a vale ", a, "\n") 
+   a = a + 1
+ }
[1] a vale  2 
[1] a vale  3 
[1] a vale  4 
[1] a vale  5 

- Estrutura for
○ for (variável in sequência) expressão
Exemplo:
> for (a in 3:5)
+   print(a)
[1] 3
[1] 4
[1] 5

                                            Vetorização
                                
- O objeto mais básico da linguagem R é o vetor. Até mesmo quando uma variável é criada para armazenar 
um número, um vetor é criado com um único elemento:

> a = 4
> a
[1] 4

- Todos os vetores possuem um modo e um tamanho. O modo determina o tipo de dado armazenado no objeto (vetor).
○ Character, Logical, Numeric e Complex;
Exemplo:
> a = 2; b = TRUE; c=1+2i
> cat(mode(a), mode(b), mode(c))
[1] numeric logical complex

- O tamanho de um objeto (vetor) é o número de elementos contido nele;
Exemplo:
> a=7; length(a)
[1] 1

- Para criar um vetor simples em R, utilize o comando c(): função de combinação.
Exemplo:
> a = c(1,2,3); a
[1] 1 2 3

- Todos os elementos de um vetor devem ser do mesmo tipo, caso contrário, o R forçará uma conversão;
> a = c(1, 1+2i, TRUE, "abacaxi")
> mode(a)
[1] "character"

- Vetores podem conter um tipo especial: NA (missing value).
Exemplo:
> a = c(1,2,3, NA, 4,5,6); a
[1]  1  2  3 NA  4  5  6

